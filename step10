from controller import Robot, Camera, CameraRecognitionObject, InertialUnit, DistanceSensor, PositionSensor, \
    DistanceSensor, Motor, Gyro, Accelerometer, Display, Supervisor
import matplotlib.pyplot as plt
import math, numpy, random, cv2
import sys

# variable
supervisor = Supervisor()
# do this once only
robot_node = supervisor.getFromDef("robotku")
if robot_node is None:
    sys.stderr.write("No DEF E-puck node found in the current world file\n")
    sys.exit(1)
trans_field = robot_node.getField("translation")

robot = Robot()
RotEnc = [0, 0]
timestep = int(robot.getBasicTimeStep())
grid = [[0, 0, 99, 0],
        [99, 0, 99, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]]
grid_scale = 12.5
con = 1

map = [['#', ' ', ' ', ' '],
       [' ', ' ', ' ', ' '],
       [' ', ' ', ' ', ' '],
       [' ', ' ', ' ', ' ']]

valnya = [[1, 2, 4, 7],
          [99, 3, 6, 11],
          [10, 5, 9, 14],
          [13, 8, 12, 15]]

visited = grid
init = [0, 0]
goal = [3, 3]
hitung = 0
x3 = 0
y3 = 0

delta = [[-1, 0, 1],  # go up
         [0, -1, 1],  # go left
         [1, 0, 1],  # go down
         [0, 1, 1]]  # go right

#next move,robot facing, x , y ,left,right)
movementRobot = [[2, 0,    0, 1,  0, 1],
                 [4, -90,  1, 1,  1, 0],
                 [6, 0,    1, 2,  0, 1],
                 [11, 0,   2, 1,  0, 1],
                 [14, -90, 2, 3,  1, 0],
                 [15, -90, 3, 3,  1, 0]]

# activation camera
camera = robot.getDevice('camera')
camera.enable(timestep)
camera.recognitionEnable(timestep)
width = int(camera.getWidth())
height = int(camera.getHeight())

# getting the position sensors
roki = robot.getDevice('left wheel sensor')
roka = robot.getDevice('right wheel sensor')
roki.enable(timestep)
roka.enable(timestep)

# enable imu
imu = robot.getDevice('inertial unit')
imu.enable(timestep)

# get handler to motors and set target position to infinity
leftMotor = robot.getDevice('left wheel motor')
rightMotor = robot.getDevice('right wheel motor')
leftMotor.setPosition(float('inf'))
rightMotor.setPosition(float('inf'))
leftMotor.setVelocity(0)
rightMotor.setVelocity(0)

# values for robot in inch
# wheel_radius = 1.6 / 2.0
# wheel_circ = 2 * 3.14 * wheel_radius
# enc_unit = wheel_circ / 6.28

# value for robot in cm
rRoda = 2.05
enc_unit = (2 * 3.18 * rRoda) / 6.28

max_speed = 4
# distance between wheels in inches and middle of the robot d_mid
d = 2.28
d_mid = d / 2.0
motor_posisi_awal = [0, 0]


def printmap(grid):
    for i in range(len(grid)):
        print(grid[i])
def get_direction():
    # maju = 1, mundur=2, kanan=3, kiri=4
    # jelaskan magsud dari bobot :
    imu_val = (imu.getRollPitchYaw()[2] * 180) / 3.14159
    if (imu_val <= -135 and imu_val >= -180) or (135 <= imu_val <= 180):
        dir = "North"
        bobot = [[25, 75, 100, 75], [1, 4, 3, 2]]
    elif imu_val <= -45 and imu_val > -135:
        dir = "West"
        bobot = [[75, 25, 75, 100], [3, 1, 4, 2]]
    elif 45 <= imu_val <= 135:
        dir = "East"
        bobot = [[75, 100, 75, 25], [4, 2, 3, 1]]
    elif (-45 < imu_val <= 0) or (0 <= imu_val < 45):
        dir = "South"
        bobot = [[100, 75, 25, 75], [2, 3, 1, 4]]
    return imu_val, bobot, dir
def cm(meters):
    return round(meters * 100)
def get_sen_jarak():
    # returns left, front, right sensors in inches
    return cm(depan.getValue()), cm(kanan.getValue()), cm(kiri.getValue())
def get_motor_pos():
    return roki.getValue(), roka.getValue()
def robot_movement(RotEnc, RotEnc_new, enc_unit, pose):
    motor_shift = [0,0]
    jarak = [0,0]
    for i in range(len(RotEnc_new)):  # menghitung jarak pergeseran robot
        motor_shift[i] = RotEnc_new[i] - RotEnc[i]  # menghitung pergeseran rotaty
        jarak[i] = motor_shift[i] * enc_unit  # menghitung jarak pergeseran robot
    v = (jarak[0] + jarak[1]) / 2
    w = (jarak[0] - jarak[1]) / 52
    pose[0] += v * math.cos(pose[2])
    pose[1] += v * math.sin(pose[2])
    pose[2] += w
    return pose
'''
def search(grid, init, goal, hitung):
    closed = [[0 for row in range(len(grid[0]))] for col in range(len(grid))]
    closed[init[0]][init[1]] = 1
    expand = [[-1 for row in range(len(grid[0]))] for col in range(len(grid))]

    x = init[0]
    y = init[1]
    g = 0

    open = [[g, x, y]]

    found = False
    resign = False
    count = 0

    while not found and not resign:
        open.sort()
        open.reverse()
        next = open.pop()
        x = next[1]
        y = next[2]
        z = next[0]
        # print(open)
        expand[x][y] = count
        count += 1

        if x == goal[0] and y == goal[1]:
            found = True
        else:
            for i in range(len(delta)):
                x2 = x + delta[i][0]
                y2 = y + delta[i][1]
                # print(delta[i][3])
                if x2 >= 0 and x2 < len(grid) and y2 >= 0 and y2 < len(grid[0]):
                    if closed[x2][y2] == 0 and grid[x2][y2] == 0:
                        g2 = delta[i][2]
                        open.append([g2, x2, y2])
                        closed[x2][y2] = 1
                        visited[x2][y2] = hitung
                        hitung += 1
                        for i in range(len(visited)):
                            print(closed[i], "    ", visited[i])
    return expand
    # print("++++++++++++++++")
def nextmovenya(bobot, valnya, delta, x, y):
    bobotcomparison = []
    for i in range(len(delta)):
        x2 = x + delta[i][0]
        y2 = y + delta[i][1]
        # print('valnya',valnya[x2][y2])
        if x2 >= 0 and x2 < len(valnya) and y2 >= 0 and y2 < len(valnya[0]):
            bobotcomparison.append([bobot[0][i] * valnya[x2][y2], i])
    print(bobotcomparison)
    zz = numpy.transpose(bobotcomparison)
    print('bobotcom.t', zz)
    b_min = min(zz[0])
    print('min', b_min)

    print('bobotcom', bobotcomparison)
    for i in range(len(bobotcomparison)):
        if (b_min == bobotcomparison[i][0]):
            nextmove = bobotcomparison[i][1]
    # dapat next move
    nextmove2 = bobot[1][nextmove]
    return nextmove2
'''
def getMidPoint(camImage):
    #convert to grayscale, gaussian blur filter, and threshold
    camImage = cv2.GaussianBlur(camImage,(9,9),cv2.BORDER_DEFAULT)
    #cv2.imwrite("../thresh.jpg",camImage)
    camImage = cv2.threshold(camImage,100,255,cv2.THRESH_BINARY_INV)
    
      
    #erode for noise elimination,dilate to restore some eroded parts of image
def get_image_from_camera():
    """
    Take an image from the camera device and prepare it for OpenCV processing:
    - convert data type,
    - convert to RGB format (from BGRA), and
    - rotate & flip to match the actual image.
    """
    img = camera.getImageArray()
    img = numpy.asarray(img, dtype=numpy.uint8)
    img = cv2.cvtColor(img, cv2.COLOR_BGRA2RGB)
    img = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    #cv2.imwrite("../img1.jpg",img)
    return cv2.flip(img, 1)
    
  

#Posisi Awal
x_init = 0
y_init = 0
#posisi sekarang
x = 0
y = 0

i = 0 #posisi awal di movementList
pose = [0,0,0]
x_mobo_prev = 0
y_mobo_prev = 0
xname = 1
name = str('xx')
extension = str('.jpg')
print('start')

#ploting setting

while robot.step(timestep) != -1:
    filename = str(name+str(xname)+extension)
    camera.saveImage(filename,100)
    #print('posisi = ', x, y)
    #print('goal   = ', goal)
    # cek posisi robot terhadap hasil path planing
    if x == goal[0] and y == goal[1]:
        leftMotor.setVelocity(0)
        rightMotor.setVelocity(0)
    else:
        arah = get_direction()
        arahRobot = arah[0]
        
        RotEnc_new = get_motor_pos()
        pose = robot_movement(RotEnc, RotEnc_new, enc_unit, pose)
        RotEnc = RotEnc_new
 
        #jika arah sesuai MAJU
        if arahRobot >= movementRobot[i][1] - 0.5 and arahRobot <= movementRobot[i][1] + 0.5:
            #incoming frames become Mat objects
            #gray = get_image_from_camera()
            
            #getMidPoint(gray)
            #print(frame)
            
            leftMotor.setVelocity(3)
            rightMotor.setVelocity(3)
            # kalkulasi pergerakan robot
            RotEnc_new = get_motor_pos()
            pose = robot_movement(RotEnc, RotEnc_new, enc_unit, pose)
            RotEnc = RotEnc_new
            #update posisi mobo
            x_mobo = math.floor(abs(pose[0]) / grid_scale) - x_mobo_prev
            y_mobo = math.floor(abs(pose[1]) / grid_scale) - y_mobo_prev


            #jika robot masih di grid yang sama
            if (x_mobo != 0):
                print('xmobo ', x_mobo, y_mobo)
                x_mobo_prev = x_mobo + x_mobo_prev
                y_mobo_prev = y_mobo + y_mobo_prev

                x += (x_mobo * movementRobot[i][4]) + (y_mobo * movementRobot[i][4])
                y += (x_mobo * movementRobot[i][5]) + (y_mobo * movementRobot[i][5])


                print('x dan y = ', x, y)
                print('xy_mobo = ', x_mobo, y_mobo)
                print('xy_init = ', x_init, y_init)
                print('pose = ', pose)
                print('movement = ', movementRobot[i][2], movementRobot[i][3])
                print('====================')


            #jika robot berpindah grid
            if x_init != x or y_init != y:
                map[x_init][y_init] = ' '
                map[x][y] = '#'
                print('updatemap')
                x_init = x
                y_init = y
                i += 1
                print('pergerakan ke i= ', i)
                print(pose)
                printmap(map)
                #reset pose untuk grid baru
                pose = [0, 0, 0]
                x_mobo_prev = 0
                y_mobo_prev = 0

        #arah tidak sesuai PUTAR sampai arah sesuai
        else:

            possible_left  = 180 + movementRobot[i][1] - arahRobot
            possible_right = 180 - movementRobot[i][1] + arahRobot
            '''
            print(arah[0])
            print(movementRobot[i][1])
            print('arah = ',arahRobot)
            print('possible = ',possible_right, possible_left)
            '''
            if (possible_right > possible_left):
                leftMotor.setVelocity(0.5)
                rightMotor.setVelocity(-0.5)
                #print('belok kiri')
            if(possible_right < possible_left):
                leftMotor.setVelocity(-0.5)
                rightMotor.setVelocity(0.5)
                #print('belok kanan')
            pose = [0, 0, 0]
            x_mobo_prev = 0
            y_mobo_prev = 0
        values = trans_field.getSFVec3f()
        print("MY_ROBOT is at position: %g %g %g" % (values[0], values[1], values[2]))

    xname=xname+1
    #plt.show()

    #printmap(map)
    #print(pose)
    #print(len(movementRobot))
