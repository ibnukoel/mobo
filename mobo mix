from controller import Robot, Camera, CameraRecognitionObject, InertialUnit, DistanceSensor, PositionSensor, Keyboard, \
    DistanceSensor, Motor, Gyro, Accelerometer, Display
import math, numpy, random

#variable
robot = Robot()
RotEnc = [0,0]
mapScale = 25
timestep = int(robot.getBasicTimeStep())
#kb = Keyboard()
#kb.enable(timestep)
grid = [[0,0,0,0],
        [0,0,0,0],
        [99,0,0,0],
        [0,0,0,0]]

con=1

map = [['#',' ',' ',' '],
       [' ', ' ', ' ', ' '],
       [' ', ' ', ' ', ' '],
       [' ', ' ', ' ', ' ']]

valMap = [[6, 5, 4, 3],
[5, 4, 3, 2],
[99, 3, 2, 1],
[3, 2, 1, 0]]

visited = grid
init = [0,0]
goal = [3,3]
hitung = 0
x3 = 0
y3 = 0


delta = [[-1, 0,1],  # go up
         [0, -1,1],  # go left
         [1, 0,1],  # go down
         [0, 1,1]]  # go right
"""         
#enable distance sensors
depan = robot.getDevice('front_ds')
kiri = robot.getDevice('left_ds')
kanan = robot.getDevice('right_ds')
depan.enable(timestep)
kiri.enable(timestep)
kanan.enable(timestep)
"""
movementRobot = [[2, 0, 0, 1, 0, 1],
                 [4, 0, 0, 2, 0 ,1],
                 [7, 0, 0, 3, 0, 1],
                 [11, -90, 1, 3, 1, 0],
                 [14, -90, 2, 3, 1, 0],
                 [15, -90, 3, 3, 1, 0]]

# getting the position sensors
roki = robot.getDevice('left wheel sensor')
roka = robot.getDevice('right wheel sensor')
roki.enable(timestep)
roka.enable(timestep)

# enable camera and recognition
camera = robot.getDevice('camera')
camera.enable(timestep)
camera.recognitionEnable(timestep)

#enable imu
imu = robot.getDevice('inertial unit')
imu.enable(timestep)

# get handler to motors and set target position to infinity
leftMotor = robot.getDevice('left wheel motor')
rightMotor = robot.getDevice('right wheel motor')
leftMotor.setPosition(float('inf'))
rightMotor.setPosition(float('inf'))
leftMotor.setVelocity(0)
rightMotor.setVelocity(0)

"""
values for robot in inch
wheel_radius = 1.6 / 2.0
wheel_circ = 2 * 3.14 * wheel_radius
enc_unit = wheel_circ / 6.28
"""
#value for robot in cm
rRoda = 2.05
enc_unit = (2 * 3.18 * rRoda) / 6.28
max_speed = 4
# distance between wheels in inches and middle of the robot d_mid
d = 2.28
d_mid = d / 2.0
motor_posisi_awal = [0,0]

"""
def keyPress (key):
    if key==315:
        speed = [5,5]
    elif key==317:
        speed = [-5,-5]
    elif key==316:
        speed = [3,-3]
    elif key==314:
        speed = [-3,3]
    else:
        speed = [0,0]
    return speed
"""
def printmap(grid):
    for i in range(len(grid)):
        print(grid[i])
        
def moboControl (kondisi):
    if kondisi == 'forward':
        speed = [4,4]
    elif kondisi == 'turnBack':
        speed = [1,-1]
    elif kondisi == 'turnLeft':
        speed = [0,1]
    elif kondisi == 'turnRight':
        speed = [1,0]
    elif kondisi == 'stop':
        speed = [0,0]
    print(speed)
    return leftMotor.setVelocity(speed[0]), rightMotor.setVelocity(speed[1])
            
def get_direction():
    # maju = 1, mundur=2, kanan=3, kiri4
    imu_val = (imu.getRollPitchYaw()[2] * 180) / 3.14159
    if (imu_val <= -135 and imu_val >= -180) or (135 <= imu_val <= 180):
        #dir = "North"
        bobot = [[25, 75, 100,75],[1,4,3,2]]
    elif imu_val <= -45 and imu_val > -135:
        #dir = "West"
        bobot = [[75, 25, 75,100],[3,1,4,2]]
    elif 45 <= imu_val <= 135:
        #dir = "East"
        bobot = [[75, 100, 75,25],[4,2,3,1]]
    elif (-45 < imu_val <= 0) or (0 <= imu_val < 45):
        #dir = "South"
        bobot = [[100, 75, 25,75],[2,3,1,4]]
    return imu_val,bobot
def cm(meters):
    return round(meters * 100)
def get_sen_jarak():
    # returns left, front, right sensors in inches
    return cm(depan.getValue()), cm(kanan.getValue()), cm(kiri.getValue())
def get_motor_pos():
    return roki.getValue(), roka.getValue()
def robot_movement(RotEnc, RotEnc_new, enc_unit, pose):
    for i in range(len(RotEnc_new)):  # menghitung jarak pergeseran robot
        motor_shift[i] = RotEnc_new[i] - RotEnc[i]  # menghitung pergeseran rotaty
        jarak[i] = motor_shift[i] * enc_unit  # menghitung jarak pergeseran robot
    print(jarak)
    v = (jarak[0] + jarak[1]) / 2
    w = (jarak[1] - jarak[0]) / 5.2
    print('v w = ',v,w)
    pose[0] += v * math.cos(pose[2])
    pose[1] += v * math.sin(pose[2])
    pose[2] += w
    return pose
    
def robotPoseCart(pose, poseCart):
    poseCart[0] = pose[0]*math.cos(pose[2]) + pose[1]*math.sin(pose[2])
    poseCart[1] = pose[1]*math.cos(pose[2])-(pose[0]*math.sin(pose[2]))
    poseCart[2] = pose[2]
    return poseCart
    
def search(grid,init,goal,hitung):
    closed = [[0 for row in range(len(grid[0]))] for col in range(len(grid))]
    closed[init[0]][init[1]] = 1
    expand = [[-1 for row in range(len(grid[0]))] for col in range(len(grid))]

    x = init[0]
    y = init[1]
    g = 0

    open = [[g,x,y]]

    found = False
    resign = False
    count = 0

    while not found and not resign:
        open.sort()
        open.reverse()
        next = open.pop()
        x = next[1]
        y = next[2]
        z = next[0]
        #print(open)
        expand [x][y] = count
        count += 1

        if x == goal[0] and y==goal[1]:
            found = True
        else:
            for i in range(len(delta)):
                x2 = x + delta[i][0]
                y2 = y + delta[i][1]
                #print(delta[i][3])
                if x2 >= 0 and x2 < len(grid) and y2 >=0 and y2 < len(grid[0]):
                    if closed[x2][y2] ==0 and grid[x2][y2] ==0:
                        g2 = delta[i][2]
                        open.append([g2,x2,y2])
                        closed[x2][y2] = 1
                        visited[x2][y2] = hitung
                        hitung += 1
                        for i in range(len(visited)):
                            print(closed[i],"    ",visited[i])
    return expand
            
def nextmovenya(bobot, valMap, delta,x,y):
    bobotcomparison = []
    for i in range(len(delta)):
        x2 = x + delta[i][0]
        y2 = y + delta[i][1]
        #print('valMap',valMap[x2][y2])
        if x2 >= 0 and x2 < len(valMap) and y2 >= 0 and y2 < len(valMap[0]):
            bobotcomparison.append([bobot[0][i] * valMap[x2][y2], i])
    #print(bobotcomparison)
    zz = numpy.transpose(bobotcomparison)
    #print('bobotcom.t',zz)
    b_min = min(zz[0])
    #print('min',b_min)

    #print('bobotcom',bobotcomparison)
    for i in range(len(bobotcomparison)):
        if (b_min == bobotcomparison[i][0]):
            nextmove = bobotcomparison[i][1]
    # dapat next move
    nextmove2 = bobot[1][nextmove]
    return nextmove2

    
RotEnc = [0,0]
motor_shift = [0,0]
jarak = [0,0]
pose = [0,0,0]
poseCart = [0,0,0]
leftMotor.setVelocity(4)
rightMotor.setVelocity(4)
j = 0
x = init[1]
y = init[0]
finished = 0
kondisi = 'stop'

#moboGithubTambahan
i = 0
x_axis = init[0]
y_axis = init[1]
x_m = 0
y_m = 0
x_mobo = 0
y_mobo = 0
x_mobot1 = 0
y_mobot1 = 0
# expand = search(grid,init,goal,hitung)
arah = get_direction()
arahRobot = arah[0]
centerGrid = 1
movingForward = 1
    #print(round(arahRobot))
    #print(movementRobot[i][1])
    
while robot.step(timestep) != -1:
    # keyboard Control
    # key_in = kb.getKey()
    # speed = keyPress(key_in)
    # leftMotor.setVelocity(speed[0])
    # rightMotor.setVelocity(speed[1])
    
    # cek posisi robot terhadap hasil path planing
    if x_axis==goal[0] and y_axis==goal[1]:
        kondisi = 'stop'
        moboControl(kondisi)
        print("Stop")
    else :
        RotEnc_new = get_motor_pos()
        if j == 0:              # pergerakan roda
            RotEnc = RotEnc_new
            j = 1
        pose = robot_movement(RotEnc, RotEnc_new, enc_unit, pose) #dapatga pergeseran robot dari perhitungan encoder roda
        poseCart = robotPoseCart(pose, poseCart)
        RotEnc = RotEnc_new  # update posisi motor
        arahRobot, bobot = get_direction()
        
        #update posisi robot

        x_axis = math.floor(abs(poseCart[0])/mapScale)
        y_axis = math.floor(abs(poseCart[1])/mapScale)          
        
        x = math.floor(abs(poseCart[0])/(mapScale/2))
        y = math.floor(abs(poseCart[1])/(mapScale/2))          
        
        if x%2==0 or y%2==0 and movingForward==1:
            centerGrid = 1
            #lihat pergerakan berikutnya
            nextmove_val = nextmovenya(bobot, valMap, delta, x_axis, y_axis) 
            centerGrid = 0
            
        if (nextmove_val == 1):
            kondisi = 'forward'
            moboControl (kondisi)
        """
        if (nextmove_val == 2):
            kondisi = 'turnBack'
            moboControl (kondisi)
            movingForward = 0
            z = arahRobot
            z, zz = get_direction()
            while (z == z2 - 90 or z == 90 - z2 or z == z2 + 90 or z == z2 - 90):
                kondisi = 'lurus'
                RotEnc = get_motor_pos()
                nextmove_val = 1
                con = 1
        """
        if (nextmove_val == 3):
            kondisi = 'turnRight'
            moboControl (kondisi) 
            movingForward = 0
            if arahRobot < 0:
                RotEnc = get_motor_pos()
                nextmove_val = 1
                con = 1
                movingForward = 1
        if (nextmove_val == 4):
            kondisi = 'turnLeft'
            moboControl (kondisi)
            movingForward = 0
            if arahRobot > 89:
                print('maju')
                nextmove_val = 1
                con = 1
                movingForward = 1

    
        """
        if x3!=x or y3!=y:
            map[x][y]=' '
            map[x3][y3]='#'
        x = x3
        y = y3
        """
        print(get_motor_pos())
        print('posisi = ',x_axis,y_axis)
        print('posisi = ',x,y)
        print('goal   = ',goal)
        print('ambil data arah',get_direction())
        print('grid',x_mobo,y_mobo)
        print('next',nextmove_val)  # maju = 1, mundur=2, kanan=3, kiri4
        print('status robot = ',kondisi)
        print('pose',pose)
        print('poseCart',poseCart)
        print('arah',arahRobot)
        #print(x3,y3)
        printmap(map)
